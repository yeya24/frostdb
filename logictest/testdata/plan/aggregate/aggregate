createtable schema=default
----

# It might be a bit surprising that the hash aggregate is planned in this case but this is expected, since we're only
# grouping by one concrete column of the dynamic column schema. Consider, for example, if there was another column,
# labels.label0 that sorted physically before labels.label1.
exec
explain select sum(value) as value_sum group by (example_type, labels.label1)
----
TableScan [concurrent] - Projection (value, example_type, labels.label1) - HashAggregate (sum(value) by example_type,labels.label1) - Synchronizer - HashAggregate (sum(value) by example_type,labels.label1) - Projection (sum(value) as value_sum)

# An ordered aggregation should be planned in this case because the full set of dynamic columns is specified.
exec
explain select sum(value) as value_sum group by (example_type, labels)
----
TableScan [concurrent] - Projection (value, example_type, labels) - HashAggregate (sum(value) by example_type,labels) - Synchronizer - HashAggregate (sum(value) by example_type,labels) - Projection (sum(value) as value_sum)

# A hash aggregation is planned in the case that the group by columns are inverted. TODO(asubiotto): We could probably
# plan an ordered aggregation in this case, but let's not do so unless necessary.
exec
explain select sum(value) as value_sum group by (labels, example_type)
----
TableScan [concurrent] - Projection (value, labels, example_type) - HashAggregate (sum(value) by labels,example_type) - Synchronizer - HashAggregate (sum(value) by labels,example_type) - Projection (sum(value) as value_sum)

# A hash aggregation should be planned in this case because we are not grouping by example_type, so the group by columns
# are not a prefix of the sorting columns.
exec
explain select sum(value) as value_sum group by (labels)
----
TableScan [concurrent] - Projection (value, labels) - HashAggregate (sum(value) by labels) - Synchronizer - HashAggregate (sum(value) by labels) - Projection (sum(value) as value_sum)

# If however, the prefix that is not contained by the grouping columns is covered by an equality filter, an ordered
# aggregation can be planned since we "fix" a prefix of the sorting columns to a given value.
exec
explain select sum(value) as value_sum where example_type = 'some_value' group by (labels)
----
TableScan [concurrent] - PredicateFilter (example_type == some_value) - Projection (value, labels) - HashAggregate (sum(value) by labels) - Synchronizer - HashAggregate (sum(value) by labels) - Projection (sum(value) as value_sum)

exec
explain select sum(value) as value_sum where example_type = 'some_value' group by (labels, timestamp)
----
TableScan [concurrent] - PredicateFilter (example_type == some_value) - Projection (value, labels, timestamp) - HashAggregate (sum(value) by labels,timestamp) - Synchronizer - HashAggregate (sum(value) by labels,timestamp) - Projection (sum(value) as value_sum)

# The above only applies to equality filters of course.
exec
explain select sum(value) as value_sum where example_type > 'some_value' group by (labels)
----
TableScan [concurrent] - PredicateFilter (example_type > some_value) - Projection (value, labels) - HashAggregate (sum(value) by labels) - Synchronizer - HashAggregate (sum(value) by labels) - Projection (sum(value) as value_sum)

# And here's a hash aggregation with a filter on another column.
exec
explain select sum(value) as value_sum where timestamp >= 1 group by labels.label1
----
TableScan [concurrent] - PredicateFilter (timestamp >= 1) - Projection (value, labels.label1) - HashAggregate (sum(value) by labels.label1) - Synchronizer - HashAggregate (sum(value) by labels.label1) - Projection (sum(value) as value_sum)

exec
explain select labels.label2, sum(value) as value_sum, count(value) as value_count group by labels.label2
----
TableScan [concurrent] - Projection (labels.label2, value) - HashAggregate (sum(value),count(value) by labels.label2) - Synchronizer - HashAggregate (sum(value),count(value) by labels.label2) - Projection (labels.label2, sum(value) as value_sum, count(value) as value_count)

exec
explain select example_type, labels, sum(value) as value_sum group by (example_type, labels)
----
TableScan [concurrent] - Projection (example_type, labels, value) - HashAggregate (sum(value) by example_type,labels) - Synchronizer - HashAggregate (sum(value) by example_type,labels) - Projection (example_type, labels, sum(value) as value_sum)

exec
explain select sum(value * timestamp) group by stacktrace
----
TableScan [concurrent] - Projection (value * timestamp, stacktrace) - HashAggregate (sum(value * timestamp) by stacktrace) - Synchronizer - HashAggregate (sum(value * timestamp) by stacktrace) - Projection (sum(value * timestamp))

exec
explain select avg(value) group by stacktrace
----
TableScan [concurrent] - Projection (value, stacktrace) - HashAggregate (sum(value),count(value) by stacktrace) - Synchronizer - HashAggregate (sum(value),count(value) by stacktrace) - Projection (stacktrace, sum(value) / count(value) as avg(value)) - Projection (avg(value))

exec
explain select max(value) - min(value), sum(value) / count(value) group by labels.label1
----
TableScan [concurrent] - Projection (value, labels.label1) - HashAggregate (max(value),min(value),sum(value),count(value) by labels.label1) - Synchronizer - HashAggregate (max(value),min(value),sum(value),count(value) by labels.label1) - Projection (max(value) - min(value), sum(value) / count(value))

exec
explain select labels.label1, (max(value) - min(value)) / 2, sum(value) / count(value), (sum(value) / count(value)) * 2 group by labels.label1
----
TableScan [concurrent] - Projection (labels.label1, value) - HashAggregate (max(value),min(value),sum(value),count(value),sum(value),count(value) by labels.label1) - Synchronizer - HashAggregate (max(value),min(value),sum(value),count(value),sum(value),count(value) by labels.label1) - Projection (labels.label1, max(value) - min(value) / 2, sum(value) / count(value), sum(value) / count(value) * 2)

# Make sure that the limit happens after the aggregation is done.
exec
explain select sum(value) as value_sum group by (example_type, labels.label1) limit 2
----
TableScan [concurrent] - Projection (value, example_type, labels.label1) - HashAggregate (sum(value) by example_type,labels.label1) - Synchronizer - HashAggregate (sum(value) by example_type,labels.label1) - Projection (sum(value) as value_sum) - Limit(2)

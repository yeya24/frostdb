// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: frostdb/storage/v1alpha1/storage.proto

package storagev1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Op describes a binary operator.
type Op int32

const (
	// OP_UNKNOWN_UNSPECIFIED is the default value. It should not be used.
	Op_OP_UNKNOWN_UNSPECIFIED Op = 0
	// OP_EQ is the equality operator (`==`).
	Op_OP_EQ Op = 1
	// OP_NOT_EQ is the not-equality operator (`!=`).
	Op_OP_NOT_EQ Op = 2
	// OP_LT is the less-than operator (`<`).
	Op_OP_LT Op = 3
	// OP_LT_EQ is the less-than-or-equal operator (`<=`).
	Op_OP_LT_EQ Op = 4
	// OP_GT is the greater-than operator (`>`).
	Op_OP_GT Op = 5
	// OP_GT_EQ is the greater-than-or-equal operator (`>=`).
	Op_OP_GT_EQ Op = 6
	// OP_REGEX_MATCH is the regular expression match operator (`=~`).
	Op_OP_REGEX_MATCH Op = 7
	// OP_REGEX_NOT_MATCH is the regular expression not-match operator (`!~`).
	Op_OP_REGEX_NOT_MATCH Op = 8
	// OP_AND is the logical and operator (`&&`).
	Op_OP_AND Op = 9
	// OP_OR is the logical or operator (`||`).
	Op_OP_OR Op = 10
	// OP_ADD is the arithmetric addition (`+`).
	Op_OP_ADD Op = 11
	// OP_SUB is the arithmetric subtraction (`-`).
	Op_OP_SUB Op = 12
	// OP_MUL is the arithmetric multiplication (`*`).
	Op_OP_MUL Op = 13
	// OP_DIV is the arithmetric division (`/`).
	Op_OP_DIV Op = 14
	// OP_CONTAINS performs substring matches.
	Op_OP_CONTAINS Op = 15
	// OP_NOT_CONTAINS performs substring matches.
	Op_OP_NOT_CONTAINS Op = 16
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0:  "OP_UNKNOWN_UNSPECIFIED",
		1:  "OP_EQ",
		2:  "OP_NOT_EQ",
		3:  "OP_LT",
		4:  "OP_LT_EQ",
		5:  "OP_GT",
		6:  "OP_GT_EQ",
		7:  "OP_REGEX_MATCH",
		8:  "OP_REGEX_NOT_MATCH",
		9:  "OP_AND",
		10: "OP_OR",
		11: "OP_ADD",
		12: "OP_SUB",
		13: "OP_MUL",
		14: "OP_DIV",
		15: "OP_CONTAINS",
		16: "OP_NOT_CONTAINS",
	}
	Op_value = map[string]int32{
		"OP_UNKNOWN_UNSPECIFIED": 0,
		"OP_EQ":                  1,
		"OP_NOT_EQ":              2,
		"OP_LT":                  3,
		"OP_LT_EQ":               4,
		"OP_GT":                  5,
		"OP_GT_EQ":               6,
		"OP_REGEX_MATCH":         7,
		"OP_REGEX_NOT_MATCH":     8,
		"OP_AND":                 9,
		"OP_OR":                  10,
		"OP_ADD":                 11,
		"OP_SUB":                 12,
		"OP_MUL":                 13,
		"OP_DIV":                 14,
		"OP_CONTAINS":            15,
		"OP_NOT_CONTAINS":        16,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_frostdb_storage_v1alpha1_storage_proto_enumTypes[0].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_frostdb_storage_v1alpha1_storage_proto_enumTypes[0]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{0}
}

// Apache Arrow type.
type Type int32

const (
	// The default value, this must not occur.
	Type_TYPE_UNKNOWN_UNSPECIFIED Type = 0
	// Float64
	Type_TYPE_FLOAT64 Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNKNOWN_UNSPECIFIED",
		1: "TYPE_FLOAT64",
	}
	Type_value = map[string]int32{
		"TYPE_UNKNOWN_UNSPECIFIED": 0,
		"TYPE_FLOAT64":             1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_frostdb_storage_v1alpha1_storage_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_frostdb_storage_v1alpha1_storage_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{1}
}

// Type is the type of aggregation function.
type AggregationFunction_Type int32

const (
	// UNKNOWN_UNSPECIFIED is the default value. It should not be used.
	AggregationFunction_TYPE_UNKNOWN_UNSPECIFIED AggregationFunction_Type = 0
	// SUM is the sum aggregation function.
	AggregationFunction_TYPE_SUM AggregationFunction_Type = 1
	// MIN is the min aggregation function.
	AggregationFunction_TYPE_MIN AggregationFunction_Type = 2
	// MAX is the max aggregation function.
	AggregationFunction_TYPE_MAX AggregationFunction_Type = 3
	// COUNT is the count aggregation function.
	AggregationFunction_TYPE_COUNT AggregationFunction_Type = 4
	// AVG is the avg aggregation function.
	AggregationFunction_TYPE_AVG AggregationFunction_Type = 5
	// UNIQUE is the unique aggregation function.
	AggregationFunction_TYPE_UNIQUE AggregationFunction_Type = 6
	// AND is the and aggregation function.
	AggregationFunction_TYPE_AND AggregationFunction_Type = 7
)

// Enum value maps for AggregationFunction_Type.
var (
	AggregationFunction_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN_UNSPECIFIED",
		1: "TYPE_SUM",
		2: "TYPE_MIN",
		3: "TYPE_MAX",
		4: "TYPE_COUNT",
		5: "TYPE_AVG",
		6: "TYPE_UNIQUE",
		7: "TYPE_AND",
	}
	AggregationFunction_Type_value = map[string]int32{
		"TYPE_UNKNOWN_UNSPECIFIED": 0,
		"TYPE_SUM":                 1,
		"TYPE_MIN":                 2,
		"TYPE_MAX":                 3,
		"TYPE_COUNT":               4,
		"TYPE_AVG":                 5,
		"TYPE_UNIQUE":              6,
		"TYPE_AND":                 7,
	}
)

func (x AggregationFunction_Type) Enum() *AggregationFunction_Type {
	p := new(AggregationFunction_Type)
	*p = x
	return p
}

func (x AggregationFunction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationFunction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_frostdb_storage_v1alpha1_storage_proto_enumTypes[2].Descriptor()
}

func (AggregationFunction_Type) Type() protoreflect.EnumType {
	return &file_frostdb_storage_v1alpha1_storage_proto_enumTypes[2]
}

func (x AggregationFunction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationFunction_Type.Descriptor instead.
func (AggregationFunction_Type) EnumDescriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{23, 0}
}

// QueryRequest is the message sent to the Query gRPC endpoint.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PlanRoot is the root of the query plan (i.e. a scan node).
	PlanRoot *PlanNode `protobuf:"bytes,1,opt,name=plan_root,json=planRoot,proto3" json:"plan_root,omitempty"`
	// description describes the query.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetPlanRoot() *PlanNode {
	if x != nil {
		return x.PlanRoot
	}
	return nil
}

func (x *QueryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// QueryResponse is the message received from the Query gRPC endpoint.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting arrow record as bytes.
	Record []byte `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResponse) GetRecord() []byte {
	if x != nil {
		return x.Record
	}
	return nil
}

// PlanNode describes a query plan.
type PlanNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next is the next PlanNode in the plan, i.e. the node that this node should
	// push data to.
	Next *PlanNode `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	// Spec is this PlanNode's spec.
	Spec *PlanNodeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *PlanNode) Reset() {
	*x = PlanNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanNode) ProtoMessage() {}

func (x *PlanNode) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanNode.ProtoReflect.Descriptor instead.
func (*PlanNode) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *PlanNode) GetNext() *PlanNode {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *PlanNode) GetSpec() *PlanNodeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// PlanNodeSpec is a PlanNode's information. This is a message that wraps oneof
// to ensure forward compatibility:
// https://developers.google.com/protocol-buffers/docs/proto3#backwards-compatibility_issues
type PlanNodeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec is this PlanNode's information.
	//
	// Types that are assignable to Spec:
	//
	//	*PlanNodeSpec_TableScan
	//	*PlanNodeSpec_SchemaScan
	//	*PlanNodeSpec_Filter
	//	*PlanNodeSpec_Projection
	//	*PlanNodeSpec_Distinct
	//	*PlanNodeSpec_Aggregation
	//	*PlanNodeSpec_Limit
	Spec isPlanNodeSpec_Spec `protobuf_oneof:"spec"`
}

func (x *PlanNodeSpec) Reset() {
	*x = PlanNodeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanNodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanNodeSpec) ProtoMessage() {}

func (x *PlanNodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanNodeSpec.ProtoReflect.Descriptor instead.
func (*PlanNodeSpec) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{3}
}

func (m *PlanNodeSpec) GetSpec() isPlanNodeSpec_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *PlanNodeSpec) GetTableScan() *TableScan {
	if x, ok := x.GetSpec().(*PlanNodeSpec_TableScan); ok {
		return x.TableScan
	}
	return nil
}

func (x *PlanNodeSpec) GetSchemaScan() *SchemaScan {
	if x, ok := x.GetSpec().(*PlanNodeSpec_SchemaScan); ok {
		return x.SchemaScan
	}
	return nil
}

func (x *PlanNodeSpec) GetFilter() *Filter {
	if x, ok := x.GetSpec().(*PlanNodeSpec_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *PlanNodeSpec) GetProjection() *Projection {
	if x, ok := x.GetSpec().(*PlanNodeSpec_Projection); ok {
		return x.Projection
	}
	return nil
}

func (x *PlanNodeSpec) GetDistinct() *Distinct {
	if x, ok := x.GetSpec().(*PlanNodeSpec_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (x *PlanNodeSpec) GetAggregation() *Aggregation {
	if x, ok := x.GetSpec().(*PlanNodeSpec_Aggregation); ok {
		return x.Aggregation
	}
	return nil
}

func (x *PlanNodeSpec) GetLimit() *Limit {
	if x, ok := x.GetSpec().(*PlanNodeSpec_Limit); ok {
		return x.Limit
	}
	return nil
}

type isPlanNodeSpec_Spec interface {
	isPlanNodeSpec_Spec()
}

type PlanNodeSpec_TableScan struct {
	// TableScan is specified if this PlanNode represents a table scan.
	TableScan *TableScan `protobuf:"bytes,1,opt,name=table_scan,json=tableScan,proto3,oneof"`
}

type PlanNodeSpec_SchemaScan struct {
	// SchemaScan is specified if this PlanNode represents a table scan.
	SchemaScan *SchemaScan `protobuf:"bytes,2,opt,name=schema_scan,json=schemaScan,proto3,oneof"`
}

type PlanNodeSpec_Filter struct {
	// Filter is specified if this PlanNode represents a filter.
	Filter *Filter `protobuf:"bytes,3,opt,name=filter,proto3,oneof"`
}

type PlanNodeSpec_Projection struct {
	// Projections is specified if this PlanNode represents a projection.
	Projection *Projection `protobuf:"bytes,4,opt,name=projection,proto3,oneof"`
}

type PlanNodeSpec_Distinct struct {
	// Distinct is specified if this PlanNode represents a distinct.
	Distinct *Distinct `protobuf:"bytes,5,opt,name=distinct,proto3,oneof"`
}

type PlanNodeSpec_Aggregation struct {
	// Aggregation is specified if this PlanNode represents an aggregation.
	Aggregation *Aggregation `protobuf:"bytes,6,opt,name=aggregation,proto3,oneof"`
}

type PlanNodeSpec_Limit struct {
	// Limit is specified if this PlanNode represents a limit.
	Limit *Limit `protobuf:"bytes,7,opt,name=limit,proto3,oneof"`
}

func (*PlanNodeSpec_TableScan) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_SchemaScan) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_Filter) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_Projection) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_Distinct) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_Aggregation) isPlanNodeSpec_Spec() {}

func (*PlanNodeSpec_Limit) isPlanNodeSpec_Spec() {}

// TableScan describes scanning a table to obtain rows.
type TableScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base specifies the fields shared with SchemaScan.
	Base *ScanBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *TableScan) Reset() {
	*x = TableScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableScan) ProtoMessage() {}

func (x *TableScan) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableScan.ProtoReflect.Descriptor instead.
func (*TableScan) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *TableScan) GetBase() *ScanBase {
	if x != nil {
		return x.Base
	}
	return nil
}

// SchemaScan describes scanning a table to obtain the schema.
type SchemaScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base specifies the fields shared with TableScan.
	Base *ScanBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *SchemaScan) Reset() {
	*x = SchemaScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaScan) ProtoMessage() {}

func (x *SchemaScan) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaScan.ProtoReflect.Descriptor instead.
func (*SchemaScan) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaScan) GetBase() *ScanBase {
	if x != nil {
		return x.Base
	}
	return nil
}

// ScanBase is a collection of fields shared by scans.
type ScanBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database is the name of the database to scan.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Table is the name of the table to scan.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *ScanBase) Reset() {
	*x = ScanBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanBase) ProtoMessage() {}

func (x *ScanBase) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanBase.ProtoReflect.Descriptor instead.
func (*ScanBase) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *ScanBase) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ScanBase) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

// Filter describes a filter.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expr is the filter expression.
	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *Filter) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Distinct describes a distinct node.
type Distinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exprs are the expressions to distinct by.
	Exprs []*Expr `protobuf:"bytes,1,rep,name=exprs,proto3" json:"exprs,omitempty"`
}

func (x *Distinct) Reset() {
	*x = Distinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distinct) ProtoMessage() {}

func (x *Distinct) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distinct.ProtoReflect.Descriptor instead.
func (*Distinct) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{8}
}

func (x *Distinct) GetExprs() []*Expr {
	if x != nil {
		return x.Exprs
	}
	return nil
}

// Projection describes a projection node.
type Projection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exprs are the expressions to project.
	Exprs []*Expr `protobuf:"bytes,1,rep,name=exprs,proto3" json:"exprs,omitempty"`
}

func (x *Projection) Reset() {
	*x = Projection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Projection) ProtoMessage() {}

func (x *Projection) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Projection.ProtoReflect.Descriptor instead.
func (*Projection) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *Projection) GetExprs() []*Expr {
	if x != nil {
		return x.Exprs
	}
	return nil
}

// Limit describes a limit node.
type Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expr is the expression to limit by.
	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Limit) Reset() {
	*x = Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{10}
}

func (x *Limit) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Aggregation describes an aggregation node.
type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GroupExprs are the expressions to group by.
	GroupExprs []*Expr `protobuf:"bytes,1,rep,name=group_exprs,json=groupExprs,proto3" json:"group_exprs,omitempty"`
	// AggExprs are the aggregation functions applied to values of each group.
	AggExprs []*Expr `protobuf:"bytes,2,rep,name=agg_exprs,json=aggExprs,proto3" json:"agg_exprs,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{11}
}

func (x *Aggregation) GetGroupExprs() []*Expr {
	if x != nil {
		return x.GroupExprs
	}
	return nil
}

func (x *Aggregation) GetAggExprs() []*Expr {
	if x != nil {
		return x.AggExprs
	}
	return nil
}

// Expr is the base type for all expressions.
type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// def is the definition of the expression.
	Def *ExprDef `protobuf:"bytes,1,opt,name=def,proto3" json:"def,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{12}
}

func (x *Expr) GetDef() *ExprDef {
	if x != nil {
		return x.Def
	}
	return nil
}

// ExprDefinition is a definition of an expression. It is intentionally only a
// single field that is a oneof to maintain forward compatibility when changing
// fields in each of the oneofs. This message should never have any other
// fields for forward compatibility.
type ExprDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// content is the content of the expression definition.
	//
	// Types that are assignable to Content:
	//
	//	*ExprDef_BinaryExpr
	//	*ExprDef_Column
	//	*ExprDef_Literal
	//	*ExprDef_DynamicColumn
	//	*ExprDef_AggregationFunction
	//	*ExprDef_Alias
	//	*ExprDef_Duration
	//	*ExprDef_Convert
	//	*ExprDef_If
	Content isExprDef_Content `protobuf_oneof:"content"`
}

func (x *ExprDef) Reset() {
	*x = ExprDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprDef) ProtoMessage() {}

func (x *ExprDef) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprDef.ProtoReflect.Descriptor instead.
func (*ExprDef) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{13}
}

func (m *ExprDef) GetContent() isExprDef_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ExprDef) GetBinaryExpr() *BinaryExpr {
	if x, ok := x.GetContent().(*ExprDef_BinaryExpr); ok {
		return x.BinaryExpr
	}
	return nil
}

func (x *ExprDef) GetColumn() *Column {
	if x, ok := x.GetContent().(*ExprDef_Column); ok {
		return x.Column
	}
	return nil
}

func (x *ExprDef) GetLiteral() *Literal {
	if x, ok := x.GetContent().(*ExprDef_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *ExprDef) GetDynamicColumn() *DynamicColumn {
	if x, ok := x.GetContent().(*ExprDef_DynamicColumn); ok {
		return x.DynamicColumn
	}
	return nil
}

func (x *ExprDef) GetAggregationFunction() *AggregationFunction {
	if x, ok := x.GetContent().(*ExprDef_AggregationFunction); ok {
		return x.AggregationFunction
	}
	return nil
}

func (x *ExprDef) GetAlias() *Alias {
	if x, ok := x.GetContent().(*ExprDef_Alias); ok {
		return x.Alias
	}
	return nil
}

func (x *ExprDef) GetDuration() *DurationExpr {
	if x, ok := x.GetContent().(*ExprDef_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ExprDef) GetConvert() *ConvertExpr {
	if x, ok := x.GetContent().(*ExprDef_Convert); ok {
		return x.Convert
	}
	return nil
}

func (x *ExprDef) GetIf() *IfExpr {
	if x, ok := x.GetContent().(*ExprDef_If); ok {
		return x.If
	}
	return nil
}

type isExprDef_Content interface {
	isExprDef_Content()
}

type ExprDef_BinaryExpr struct {
	// BinaryExpr is a binary expression.
	BinaryExpr *BinaryExpr `protobuf:"bytes,1,opt,name=binary_expr,json=binaryExpr,proto3,oneof"`
}

type ExprDef_Column struct {
	// Column is a column expression.
	Column *Column `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

type ExprDef_Literal struct {
	// Literal is a literal expression.
	Literal *Literal `protobuf:"bytes,3,opt,name=literal,proto3,oneof"`
}

type ExprDef_DynamicColumn struct {
	// DynamicColumn is a dynamic column expression.
	DynamicColumn *DynamicColumn `protobuf:"bytes,4,opt,name=dynamic_column,json=dynamicColumn,proto3,oneof"`
}

type ExprDef_AggregationFunction struct {
	// AggregationFunction is an aggregation function expression.
	AggregationFunction *AggregationFunction `protobuf:"bytes,5,opt,name=aggregation_function,json=aggregationFunction,proto3,oneof"`
}

type ExprDef_Alias struct {
	// Alias is an alias expression.
	Alias *Alias `protobuf:"bytes,6,opt,name=alias,proto3,oneof"`
}

type ExprDef_Duration struct {
	// DurationExpr is a duration expression to group by.
	Duration *DurationExpr `protobuf:"bytes,7,opt,name=duration,proto3,oneof"`
}

type ExprDef_Convert struct {
	// ConvertExpr is an expression to convert a column from one type to another.
	Convert *ConvertExpr `protobuf:"bytes,8,opt,name=convert,proto3,oneof"`
}

type ExprDef_If struct {
	// IfExpr is an if expression.
	If *IfExpr `protobuf:"bytes,9,opt,name=if,proto3,oneof"`
}

func (*ExprDef_BinaryExpr) isExprDef_Content() {}

func (*ExprDef_Column) isExprDef_Content() {}

func (*ExprDef_Literal) isExprDef_Content() {}

func (*ExprDef_DynamicColumn) isExprDef_Content() {}

func (*ExprDef_AggregationFunction) isExprDef_Content() {}

func (*ExprDef_Alias) isExprDef_Content() {}

func (*ExprDef_Duration) isExprDef_Content() {}

func (*ExprDef_Convert) isExprDef_Content() {}

func (*ExprDef_If) isExprDef_Content() {}

// BinaryExpression is a binary expression.
type BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// left is the left operand.
	Left *Expr `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	// right is the right operand.
	Right *Expr `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	// op is the operator.
	Op Op `protobuf:"varint,3,opt,name=op,proto3,enum=frostdb.storage.v1alpha1.Op" json:"op,omitempty"`
}

func (x *BinaryExpr) Reset() {
	*x = BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpr) ProtoMessage() {}

func (x *BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpr.ProtoReflect.Descriptor instead.
func (*BinaryExpr) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{14}
}

func (x *BinaryExpr) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BinaryExpr) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *BinaryExpr) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_OP_UNKNOWN_UNSPECIFIED
}

// IfExpr represents an if expression.
type IfExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the condition
	Condition *Expr `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// the true branch
	Then *Expr `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
	// the false branch
	Else *Expr `protobuf:"bytes,3,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *IfExpr) Reset() {
	*x = IfExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfExpr) ProtoMessage() {}

func (x *IfExpr) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfExpr.ProtoReflect.Descriptor instead.
func (*IfExpr) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{15}
}

func (x *IfExpr) GetCondition() *Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *IfExpr) GetThen() *Expr {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *IfExpr) GetElse() *Expr {
	if x != nil {
		return x.Else
	}
	return nil
}

// ConvertExpr is an expression to convert an expression to another type.
type ConvertExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the expression to convert
	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	// the type to convert to
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=frostdb.storage.v1alpha1.Type" json:"type,omitempty"`
}

func (x *ConvertExpr) Reset() {
	*x = ConvertExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertExpr) ProtoMessage() {}

func (x *ConvertExpr) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertExpr.ProtoReflect.Descriptor instead.
func (*ConvertExpr) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{16}
}

func (x *ConvertExpr) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *ConvertExpr) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNKNOWN_UNSPECIFIED
}

// Column is an explicit column in a table.
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{17}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Literal is a literal value.
type Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// content is the content of the literal.
	Content *LiteralContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Literal) Reset() {
	*x = Literal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Literal) ProtoMessage() {}

func (x *Literal) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Literal.ProtoReflect.Descriptor instead.
func (*Literal) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{18}
}

func (x *Literal) GetContent() *LiteralContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// LiteralContent is the content of a literal.
type LiteralContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the value of the literal.
	//
	// Types that are assignable to Value:
	//
	//	*LiteralContent_NullValue
	//	*LiteralContent_BoolValue
	//	*LiteralContent_Int32Value
	//	*LiteralContent_Uint32Value
	//	*LiteralContent_Int64Value
	//	*LiteralContent_Uint64Value
	//	*LiteralContent_FloatValue
	//	*LiteralContent_DoubleValue
	//	*LiteralContent_BinaryValue
	//	*LiteralContent_StringValue
	Value isLiteralContent_Value `protobuf_oneof:"value"`
}

func (x *LiteralContent) Reset() {
	*x = LiteralContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralContent) ProtoMessage() {}

func (x *LiteralContent) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralContent.ProtoReflect.Descriptor instead.
func (*LiteralContent) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{19}
}

func (m *LiteralContent) GetValue() isLiteralContent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LiteralContent) GetNullValue() *Null {
	if x, ok := x.GetValue().(*LiteralContent_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *LiteralContent) GetBoolValue() bool {
	if x, ok := x.GetValue().(*LiteralContent_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *LiteralContent) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*LiteralContent_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *LiteralContent) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*LiteralContent_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *LiteralContent) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*LiteralContent_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *LiteralContent) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*LiteralContent_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *LiteralContent) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*LiteralContent_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *LiteralContent) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*LiteralContent_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *LiteralContent) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*LiteralContent_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *LiteralContent) GetStringValue() string {
	if x, ok := x.GetValue().(*LiteralContent_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isLiteralContent_Value interface {
	isLiteralContent_Value()
}

type LiteralContent_NullValue struct {
	// null whether the value is the null value.
	NullValue *Null `protobuf:"bytes,1,opt,name=null_value,json=nullValue,proto3,oneof"`
}

type LiteralContent_BoolValue struct {
	// bool_value is the bool value.
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type LiteralContent_Int32Value struct {
	// int32_value is the int32 value.
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type LiteralContent_Uint32Value struct {
	// uint32_value is the uint32 value.
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type LiteralContent_Int64Value struct {
	// int64_value is the int64 value.
	Int64Value int64 `protobuf:"varint,5,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type LiteralContent_Uint64Value struct {
	// uint64_value is the uint64 value.
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type LiteralContent_FloatValue struct {
	// float_value is the float value.
	FloatValue float32 `protobuf:"fixed32,7,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type LiteralContent_DoubleValue struct {
	// double_value is the double value.
	DoubleValue float64 `protobuf:"fixed64,8,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type LiteralContent_BinaryValue struct {
	// binary_value is the binary value.
	BinaryValue []byte `protobuf:"bytes,9,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type LiteralContent_StringValue struct {
	// string_value is the string value.
	StringValue string `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*LiteralContent_NullValue) isLiteralContent_Value() {}

func (*LiteralContent_BoolValue) isLiteralContent_Value() {}

func (*LiteralContent_Int32Value) isLiteralContent_Value() {}

func (*LiteralContent_Uint32Value) isLiteralContent_Value() {}

func (*LiteralContent_Int64Value) isLiteralContent_Value() {}

func (*LiteralContent_Uint64Value) isLiteralContent_Value() {}

func (*LiteralContent_FloatValue) isLiteralContent_Value() {}

func (*LiteralContent_DoubleValue) isLiteralContent_Value() {}

func (*LiteralContent_BinaryValue) isLiteralContent_Value() {}

func (*LiteralContent_StringValue) isLiteralContent_Value() {}

// Null is the null value.
type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{20}
}

// Alias is an alias for an expression.
type Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the alias.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// expr is the expression to alias.
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Alias) Reset() {
	*x = Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alias) ProtoMessage() {}

func (x *Alias) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alias.ProtoReflect.Descriptor instead.
func (*Alias) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{21}
}

func (x *Alias) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Alias) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// DynamicColumn is a dynamic column.
type DynamicColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the dynamic column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DynamicColumn) Reset() {
	*x = DynamicColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicColumn) ProtoMessage() {}

func (x *DynamicColumn) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicColumn.ProtoReflect.Descriptor instead.
func (*DynamicColumn) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{22}
}

func (x *DynamicColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// AggregationFunction is an aggregation function.
type AggregationFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of aggregation function.
	Type AggregationFunction_Type `protobuf:"varint,1,opt,name=type,proto3,enum=frostdb.storage.v1alpha1.AggregationFunction_Type" json:"type,omitempty"`
	// expr is the expression to aggregate.
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *AggregationFunction) Reset() {
	*x = AggregationFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationFunction) ProtoMessage() {}

func (x *AggregationFunction) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationFunction.ProtoReflect.Descriptor instead.
func (*AggregationFunction) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{23}
}

func (x *AggregationFunction) GetType() AggregationFunction_Type {
	if x != nil {
		return x.Type
	}
	return AggregationFunction_TYPE_UNKNOWN_UNSPECIFIED
}

func (x *AggregationFunction) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// DurationExpr is a duration expressed in milliseconds.
type DurationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// milliseconds is the duration in milliseconds.
	Milliseconds int64 `protobuf:"varint,1,opt,name=milliseconds,proto3" json:"milliseconds,omitempty"`
}

func (x *DurationExpr) Reset() {
	*x = DurationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationExpr) ProtoMessage() {}

func (x *DurationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_frostdb_storage_v1alpha1_storage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationExpr.ProtoReflect.Descriptor instead.
func (*DurationExpr) Descriptor() ([]byte, []int) {
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP(), []int{24}
}

func (x *DurationExpr) GetMilliseconds() int64 {
	if x != nil {
		return x.Milliseconds
	}
	return 0
}

var File_frostdb_storage_v1alpha1_storage_proto protoreflect.FileDescriptor

var file_frostdb_storage_v1alpha1_storage_proto_rawDesc = []byte{
	0x0a, 0x26, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64,
	0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x22, 0x71, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x7e,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74,
	0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xef,
	0x03, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x44, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x43, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x08, 0x53,
	0x63, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x40, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x22, 0x3b, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x70, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x67, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08,
	0x61, 0x67, 0x67, 0x45, 0x78, 0x70, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x33, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x44, 0x65, 0x66,
	0x52, 0x03, 0x64, 0x65, 0x66, 0x22, 0x84, 0x05, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x72, 0x44, 0x65,
	0x66, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64,
	0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a,
	0x02, 0x69, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x66, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x66, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a,
	0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x34, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x52,
	0x02, 0x6f, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x49, 0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x65, 0x6c, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x4f, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x22, 0x23, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x07, 0x22, 0x32, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2a, 0x85, 0x02, 0x0a,
	0x02, 0x4f, 0x70, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f,
	0x4c, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x5f, 0x45, 0x51,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x4e,
	0x44, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50,
	0x5f, 0x53, 0x55, 0x42, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4d, 0x55, 0x4c,
	0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x44, 0x49, 0x56, 0x10, 0x0e, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0f, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x53, 0x10, 0x10, 0x2a, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x01, 0x32, 0x6e, 0x0a, 0x0e,
	0x46, 0x72, 0x6f, 0x73, 0x74, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64,
	0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x85, 0x02, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x64, 0x62, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x53, 0x58, 0xaa, 0x02, 0x18, 0x46, 0x72, 0x6f,
	0x73, 0x74, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x18, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x5c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x24, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x64, 0x62, 0x5c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x64,
	0x62, 0x3a, 0x3a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frostdb_storage_v1alpha1_storage_proto_rawDescOnce sync.Once
	file_frostdb_storage_v1alpha1_storage_proto_rawDescData = file_frostdb_storage_v1alpha1_storage_proto_rawDesc
)

func file_frostdb_storage_v1alpha1_storage_proto_rawDescGZIP() []byte {
	file_frostdb_storage_v1alpha1_storage_proto_rawDescOnce.Do(func() {
		file_frostdb_storage_v1alpha1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_frostdb_storage_v1alpha1_storage_proto_rawDescData)
	})
	return file_frostdb_storage_v1alpha1_storage_proto_rawDescData
}

var file_frostdb_storage_v1alpha1_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_frostdb_storage_v1alpha1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_frostdb_storage_v1alpha1_storage_proto_goTypes = []any{
	(Op)(0),                       // 0: frostdb.storage.v1alpha1.Op
	(Type)(0),                     // 1: frostdb.storage.v1alpha1.Type
	(AggregationFunction_Type)(0), // 2: frostdb.storage.v1alpha1.AggregationFunction.Type
	(*QueryRequest)(nil),          // 3: frostdb.storage.v1alpha1.QueryRequest
	(*QueryResponse)(nil),         // 4: frostdb.storage.v1alpha1.QueryResponse
	(*PlanNode)(nil),              // 5: frostdb.storage.v1alpha1.PlanNode
	(*PlanNodeSpec)(nil),          // 6: frostdb.storage.v1alpha1.PlanNodeSpec
	(*TableScan)(nil),             // 7: frostdb.storage.v1alpha1.TableScan
	(*SchemaScan)(nil),            // 8: frostdb.storage.v1alpha1.SchemaScan
	(*ScanBase)(nil),              // 9: frostdb.storage.v1alpha1.ScanBase
	(*Filter)(nil),                // 10: frostdb.storage.v1alpha1.Filter
	(*Distinct)(nil),              // 11: frostdb.storage.v1alpha1.Distinct
	(*Projection)(nil),            // 12: frostdb.storage.v1alpha1.Projection
	(*Limit)(nil),                 // 13: frostdb.storage.v1alpha1.Limit
	(*Aggregation)(nil),           // 14: frostdb.storage.v1alpha1.Aggregation
	(*Expr)(nil),                  // 15: frostdb.storage.v1alpha1.Expr
	(*ExprDef)(nil),               // 16: frostdb.storage.v1alpha1.ExprDef
	(*BinaryExpr)(nil),            // 17: frostdb.storage.v1alpha1.BinaryExpr
	(*IfExpr)(nil),                // 18: frostdb.storage.v1alpha1.IfExpr
	(*ConvertExpr)(nil),           // 19: frostdb.storage.v1alpha1.ConvertExpr
	(*Column)(nil),                // 20: frostdb.storage.v1alpha1.Column
	(*Literal)(nil),               // 21: frostdb.storage.v1alpha1.Literal
	(*LiteralContent)(nil),        // 22: frostdb.storage.v1alpha1.LiteralContent
	(*Null)(nil),                  // 23: frostdb.storage.v1alpha1.Null
	(*Alias)(nil),                 // 24: frostdb.storage.v1alpha1.Alias
	(*DynamicColumn)(nil),         // 25: frostdb.storage.v1alpha1.DynamicColumn
	(*AggregationFunction)(nil),   // 26: frostdb.storage.v1alpha1.AggregationFunction
	(*DurationExpr)(nil),          // 27: frostdb.storage.v1alpha1.DurationExpr
}
var file_frostdb_storage_v1alpha1_storage_proto_depIdxs = []int32{
	5,  // 0: frostdb.storage.v1alpha1.QueryRequest.plan_root:type_name -> frostdb.storage.v1alpha1.PlanNode
	5,  // 1: frostdb.storage.v1alpha1.PlanNode.next:type_name -> frostdb.storage.v1alpha1.PlanNode
	6,  // 2: frostdb.storage.v1alpha1.PlanNode.spec:type_name -> frostdb.storage.v1alpha1.PlanNodeSpec
	7,  // 3: frostdb.storage.v1alpha1.PlanNodeSpec.table_scan:type_name -> frostdb.storage.v1alpha1.TableScan
	8,  // 4: frostdb.storage.v1alpha1.PlanNodeSpec.schema_scan:type_name -> frostdb.storage.v1alpha1.SchemaScan
	10, // 5: frostdb.storage.v1alpha1.PlanNodeSpec.filter:type_name -> frostdb.storage.v1alpha1.Filter
	12, // 6: frostdb.storage.v1alpha1.PlanNodeSpec.projection:type_name -> frostdb.storage.v1alpha1.Projection
	11, // 7: frostdb.storage.v1alpha1.PlanNodeSpec.distinct:type_name -> frostdb.storage.v1alpha1.Distinct
	14, // 8: frostdb.storage.v1alpha1.PlanNodeSpec.aggregation:type_name -> frostdb.storage.v1alpha1.Aggregation
	13, // 9: frostdb.storage.v1alpha1.PlanNodeSpec.limit:type_name -> frostdb.storage.v1alpha1.Limit
	9,  // 10: frostdb.storage.v1alpha1.TableScan.base:type_name -> frostdb.storage.v1alpha1.ScanBase
	9,  // 11: frostdb.storage.v1alpha1.SchemaScan.base:type_name -> frostdb.storage.v1alpha1.ScanBase
	15, // 12: frostdb.storage.v1alpha1.Filter.expr:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 13: frostdb.storage.v1alpha1.Distinct.exprs:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 14: frostdb.storage.v1alpha1.Projection.exprs:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 15: frostdb.storage.v1alpha1.Limit.expr:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 16: frostdb.storage.v1alpha1.Aggregation.group_exprs:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 17: frostdb.storage.v1alpha1.Aggregation.agg_exprs:type_name -> frostdb.storage.v1alpha1.Expr
	16, // 18: frostdb.storage.v1alpha1.Expr.def:type_name -> frostdb.storage.v1alpha1.ExprDef
	17, // 19: frostdb.storage.v1alpha1.ExprDef.binary_expr:type_name -> frostdb.storage.v1alpha1.BinaryExpr
	20, // 20: frostdb.storage.v1alpha1.ExprDef.column:type_name -> frostdb.storage.v1alpha1.Column
	21, // 21: frostdb.storage.v1alpha1.ExprDef.literal:type_name -> frostdb.storage.v1alpha1.Literal
	25, // 22: frostdb.storage.v1alpha1.ExprDef.dynamic_column:type_name -> frostdb.storage.v1alpha1.DynamicColumn
	26, // 23: frostdb.storage.v1alpha1.ExprDef.aggregation_function:type_name -> frostdb.storage.v1alpha1.AggregationFunction
	24, // 24: frostdb.storage.v1alpha1.ExprDef.alias:type_name -> frostdb.storage.v1alpha1.Alias
	27, // 25: frostdb.storage.v1alpha1.ExprDef.duration:type_name -> frostdb.storage.v1alpha1.DurationExpr
	19, // 26: frostdb.storage.v1alpha1.ExprDef.convert:type_name -> frostdb.storage.v1alpha1.ConvertExpr
	18, // 27: frostdb.storage.v1alpha1.ExprDef.if:type_name -> frostdb.storage.v1alpha1.IfExpr
	15, // 28: frostdb.storage.v1alpha1.BinaryExpr.left:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 29: frostdb.storage.v1alpha1.BinaryExpr.right:type_name -> frostdb.storage.v1alpha1.Expr
	0,  // 30: frostdb.storage.v1alpha1.BinaryExpr.op:type_name -> frostdb.storage.v1alpha1.Op
	15, // 31: frostdb.storage.v1alpha1.IfExpr.condition:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 32: frostdb.storage.v1alpha1.IfExpr.then:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 33: frostdb.storage.v1alpha1.IfExpr.else:type_name -> frostdb.storage.v1alpha1.Expr
	15, // 34: frostdb.storage.v1alpha1.ConvertExpr.expr:type_name -> frostdb.storage.v1alpha1.Expr
	1,  // 35: frostdb.storage.v1alpha1.ConvertExpr.type:type_name -> frostdb.storage.v1alpha1.Type
	22, // 36: frostdb.storage.v1alpha1.Literal.content:type_name -> frostdb.storage.v1alpha1.LiteralContent
	23, // 37: frostdb.storage.v1alpha1.LiteralContent.null_value:type_name -> frostdb.storage.v1alpha1.Null
	15, // 38: frostdb.storage.v1alpha1.Alias.expr:type_name -> frostdb.storage.v1alpha1.Expr
	2,  // 39: frostdb.storage.v1alpha1.AggregationFunction.type:type_name -> frostdb.storage.v1alpha1.AggregationFunction.Type
	15, // 40: frostdb.storage.v1alpha1.AggregationFunction.expr:type_name -> frostdb.storage.v1alpha1.Expr
	3,  // 41: frostdb.storage.v1alpha1.FrostDBService.Query:input_type -> frostdb.storage.v1alpha1.QueryRequest
	4,  // 42: frostdb.storage.v1alpha1.FrostDBService.Query:output_type -> frostdb.storage.v1alpha1.QueryResponse
	42, // [42:43] is the sub-list for method output_type
	41, // [41:42] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_frostdb_storage_v1alpha1_storage_proto_init() }
func file_frostdb_storage_v1alpha1_storage_proto_init() {
	if File_frostdb_storage_v1alpha1_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlanNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PlanNodeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TableScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ScanBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Distinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Projection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExprDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*IfExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Literal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*LiteralContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AggregationFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frostdb_storage_v1alpha1_storage_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DurationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_frostdb_storage_v1alpha1_storage_proto_msgTypes[3].OneofWrappers = []any{
		(*PlanNodeSpec_TableScan)(nil),
		(*PlanNodeSpec_SchemaScan)(nil),
		(*PlanNodeSpec_Filter)(nil),
		(*PlanNodeSpec_Projection)(nil),
		(*PlanNodeSpec_Distinct)(nil),
		(*PlanNodeSpec_Aggregation)(nil),
		(*PlanNodeSpec_Limit)(nil),
	}
	file_frostdb_storage_v1alpha1_storage_proto_msgTypes[13].OneofWrappers = []any{
		(*ExprDef_BinaryExpr)(nil),
		(*ExprDef_Column)(nil),
		(*ExprDef_Literal)(nil),
		(*ExprDef_DynamicColumn)(nil),
		(*ExprDef_AggregationFunction)(nil),
		(*ExprDef_Alias)(nil),
		(*ExprDef_Duration)(nil),
		(*ExprDef_Convert)(nil),
		(*ExprDef_If)(nil),
	}
	file_frostdb_storage_v1alpha1_storage_proto_msgTypes[19].OneofWrappers = []any{
		(*LiteralContent_NullValue)(nil),
		(*LiteralContent_BoolValue)(nil),
		(*LiteralContent_Int32Value)(nil),
		(*LiteralContent_Uint32Value)(nil),
		(*LiteralContent_Int64Value)(nil),
		(*LiteralContent_Uint64Value)(nil),
		(*LiteralContent_FloatValue)(nil),
		(*LiteralContent_DoubleValue)(nil),
		(*LiteralContent_BinaryValue)(nil),
		(*LiteralContent_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frostdb_storage_v1alpha1_storage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frostdb_storage_v1alpha1_storage_proto_goTypes,
		DependencyIndexes: file_frostdb_storage_v1alpha1_storage_proto_depIdxs,
		EnumInfos:         file_frostdb_storage_v1alpha1_storage_proto_enumTypes,
		MessageInfos:      file_frostdb_storage_v1alpha1_storage_proto_msgTypes,
	}.Build()
	File_frostdb_storage_v1alpha1_storage_proto = out.File
	file_frostdb_storage_v1alpha1_storage_proto_rawDesc = nil
	file_frostdb_storage_v1alpha1_storage_proto_goTypes = nil
	file_frostdb_storage_v1alpha1_storage_proto_depIdxs = nil
}
